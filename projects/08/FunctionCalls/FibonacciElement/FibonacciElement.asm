// Boostrap code
@256
D=A
@SP
M=D
@return_address_Sys.init_1
D=A
@SP
AM=M+1
A=A-1
M=D
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
@ARG
D=M
@SP
AM=M+1
A=A-1
M=D
@THIS
D=M
@SP
AM=M+1
A=A-1
M=D
@THAT
D=M
@SP
AM=M+1
A=A-1
M=D
@0
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(return_address_Sys.init_1)
// function Sys.init 0
(Sys.init)
// push constant 4
@4
D=A
@SP
M=M+1
A=M-1
M=D
// call Main.fibonacci 1
@return_address_Main.fibonacci_2
D=A
@SP
AM=M+1
A=A-1
M=D
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
@ARG
D=M
@SP
AM=M+1
A=A-1
M=D
@THIS
D=M
@SP
AM=M+1
A=A-1
M=D
@THAT
D=M
@SP
AM=M+1
A=A-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(return_address_Main.fibonacci_2)
// label WHILE
(Sys.init$WHILE2)
// goto WHILE
@Sys.init$WHILE2
0;JMP
// function Main.fibonacci 0
(Main.fibonacci)
// push argument 0
@0
D=A
@ARG
D=D+M
@addr
AM=D
D=M
@SP
AM=M+1
A=A-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@END_LT1
D;JLT
@SP
A=M-1
M=0
(END_LT1)
// if-goto IF_TRUE
@SP
AM=M-1
D=M
@Main.fibonacci$IF_TRUE2
D;JNE
// goto IF_FALSE
@Main.fibonacci$IF_FALSE2
0;JMP
// label IF_TRUE
(Main.fibonacci$IF_TRUE2)
// push argument 0
@0
D=A
@ARG
D=D+M
@addr
AM=D
D=M
@SP
AM=M+1
A=A-1
M=D
// return
@LCL
D=M
@end_frame
M=D
@5
D=A
@end_frame
A=M-D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@end_frame
AM=M-1
D=M
@THAT
M=D
@end_frame
AM=M-1
D=M
@THIS
M=D
@end_frame
AM=M-1
D=M
@ARG
M=D
@end_frame
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// label IF_FALSE
(Main.fibonacci$IF_FALSE2)
// push argument 0
@0
D=A
@ARG
D=D+M
@addr
AM=D
D=M
@SP
AM=M+1
A=A-1
M=D
// push constant 2
@2
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Main.fibonacci 1
@return_address_Main.fibonacci_3
D=A
@SP
AM=M+1
A=A-1
M=D
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
@ARG
D=M
@SP
AM=M+1
A=A-1
M=D
@THIS
D=M
@SP
AM=M+1
A=A-1
M=D
@THAT
D=M
@SP
AM=M+1
A=A-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(return_address_Main.fibonacci_3)
// push argument 0
@0
D=A
@ARG
D=D+M
@addr
AM=D
D=M
@SP
AM=M+1
A=A-1
M=D
// push constant 1
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Main.fibonacci 1
@return_address_Main.fibonacci_4
D=A
@SP
AM=M+1
A=A-1
M=D
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
@ARG
D=M
@SP
AM=M+1
A=A-1
M=D
@THIS
D=M
@SP
AM=M+1
A=A-1
M=D
@THAT
D=M
@SP
AM=M+1
A=A-1
M=D
@1
D=A
@5
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(return_address_Main.fibonacci_4)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// return
@LCL
D=M
@end_frame
M=D
@5
D=A
@end_frame
A=M-D
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@end_frame
AM=M-1
D=M
@THAT
M=D
@end_frame
AM=M-1
D=M
@THIS
M=D
@end_frame
AM=M-1
D=M
@ARG
M=D
@end_frame
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
