// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[3..5], a=d0, b=d1, c=d2, d=d3, e=d4, f=d5, g=d6, h=d7);

    Mux16(a=false, b=in, sel=d0, out=ram0in);
    Mux16(a=false, b=in, sel=d1, out=ram1in);
    Mux16(a=false, b=in, sel=d2, out=ram2in);
    Mux16(a=false, b=in, sel=d3, out=ram3in);
    Mux16(a=false, b=in, sel=d4, out=ram4in);
    Mux16(a=false, b=in, sel=d5, out=ram5in);
    Mux16(a=false, b=in, sel=d6, out=ram6in);
    Mux16(a=false, b=in, sel=d7, out=ram7in);

    RAM8(in=ram0in, load=d0, address=address[0..2], out=ram0out);
    RAM8(in=ram1in, load=d1, address=address[0..2], out=ram1out);
    RAM8(in=ram2in, load=d2, address=address[0..2], out=ram2out);
    RAM8(in=ram3in, load=d3, address=address[0..2], out=ram3out);
    RAM8(in=ram4in, load=d4, address=address[0..2], out=ram4out);
    RAM8(in=ram5in, load=d5, address=address[0..2], out=ram5out);
    RAM8(in=ram6in, load=d6, address=address[0..2], out=ram6out);
    RAM8(in=ram7in, load=d7, address=address[0..2], out=ram7out);

    Mux8Way16(a=ram0out, b=ram1out, c=ram2out, d=ram3out, e=ram4out, f=ram5out, g=ram6out, h=ram7out, sel=address[3..5], out=out);
}